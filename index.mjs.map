{"version":3,"file":"index.mjs","sources":["../lib/generic_real.js","../lib/generic_complex.js","../lib/typed_real.js","../lib/typed_complex.js","../lib/validate.js","../lib/main.js","../lib/accessors_complex.js","../lib/accessors_real.js","../lib/assign.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Generates a linearly spaced array over a specified interval.\n*\n* @private\n* @param {number} start - start of interval\n* @param {number} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Array} linearly spaced array\n*\n* @example\n* var arr = linspace( 0, 100, 6, true );\n* // returns [ 0, 20, 40, 60, 80, 100 ]\n*\n* @example\n* var arr = linspace( 0, 100, 5, false );\n* // returns [ 0, 20, 40, 60, 80 ]\n*/\nfunction linspace( start, stop, len, endpoint ) {\n\tvar arr;\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn [];\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\treturn [ stop ];\n\t\t}\n\t\treturn [ start ];\n\t}\n\tarr = [ start ];\n\n\t// Calculate the increment:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\td = ( stop-start ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tarr.push( start + (d*i) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tarr.push( stop );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Complex64 = require( '@stdlib/complex-float32' );\nvar Complex128 = require( '@stdlib/complex-float64' );\nvar real = require( '@stdlib/complex-real' );\nvar imag = require( '@stdlib/complex-imag' );\nvar realf = require( '@stdlib/complex-realf' );\nvar imagf = require( '@stdlib/complex-imagf' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced complex number array over a specified interval.\n*\n* @private\n* @param {string} dt1 - start value data type\n* @param {(number|ComplexLike)} start - start of interval\n* @param {string} dt2 - stop value data type\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Array} linearly spaced array\n*/\nfunction linspace( dt1, start, dt2, stop, len, endpoint ) {\n\tvar cmplx;\n\tvar isf32;\n\tvar arr;\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\tvar re;\n\tvar im;\n\tvar dr;\n\tvar di;\n\tvar N;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn [];\n\t}\n\tisf32 = 0;\n\tif ( dt1 === 'float64' ) {\n\t\tre1 = start;\n\t\tim1 = 0.0;\n\t} else if ( dt1 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre1 = realf( start );\n\t\tim1 = imagf( start );\n\t} else {\n\t\tre1 = real( start );\n\t\tim1 = imag( start );\n\t}\n\tif ( dt2 === 'float64' ) {\n\t\tre2 = stop;\n\t\tim2 = 0.0;\n\t} else if ( dt2 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre2 = realf( stop );\n\t\tim2 = imagf( stop );\n\t} else {\n\t\tre2 = real( stop );\n\t\tim2 = imag( stop );\n\t}\n\t// Determine which complex number constructor to use according to type promotion rules:\n\tif ( isf32 === 2 ) {\n\t\tcmplx = Complex64;\n\t} else {\n\t\tcmplx = Complex128;\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\treturn [ new cmplx( re2, im2 ) ];\n\t\t}\n\t\treturn [ new cmplx( re1, im1 ) ];\n\t}\n\tarr = [ new cmplx( re1, im1 ) ];\n\n\t// Calculate the increments:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\tdr = ( re2-re1 ) / N;\n\tdi = ( im2-im1 ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tre = re1 + (dr*i);\n\t\tim = im1 + (di*i);\n\t\tarr.push( new cmplx( re, im ) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tarr.push( new cmplx( re2, im2 ) );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Generates a linearly spaced sequence over a specified interval and assigns the results to a provided output array.\n*\n* @private\n* @param {TypedArray} out - output array\n* @param {number} start - start of interval\n* @param {number} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {TypedArray} linearly spaced array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var out = new Float64Array( 6 );\n* var arr = linspace( out, 0, 100, out.length, true );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var out = new Float64Array( 5 );\n* var arr = linspace( out, 0, 100, out.length, false );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0 ]\n*/\nfunction linspace( out, start, stop, len, endpoint ) {\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tout[ 0 ] = stop;\n\t\t} else {\n\t\t\tout[ 0 ] = start;\n\t\t}\n\t\treturn out;\n\t}\n\tout[ 0 ] = start;\n\n\t// Calculate the increment:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\td = ( stop-start ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tout[ i ] = start + (d*i);\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tout[ N ] = stop;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar real = require( '@stdlib/complex-real' );\nvar imag = require( '@stdlib/complex-imag' );\nvar realf = require( '@stdlib/complex-realf' );\nvar imagf = require( '@stdlib/complex-imagf' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced complex number sequence over a specified interval and assigns the results to a provided output array strided view.\n*\n* @private\n* @param {(Float32Array|Float64Array)} out - output array strided view\n* @param {string} dt1 - start value data type\n* @param {(number|ComplexLike)} start - start of interval\n* @param {string} dt2 - stop value data type\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {(Float32Array|Float64Array)} complex number array view\n*/\nfunction linspace( out, dt1, start, dt2, stop, len, endpoint ) {\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\tvar dr;\n\tvar di;\n\tvar N;\n\tvar i;\n\tvar j;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\tif ( dt1 === 'float64' ) {\n\t\tre1 = start;\n\t\tim1 = 0.0;\n\t} else if ( dt1 === 'complex64' ) {\n\t\tre1 = realf( start );\n\t\tim1 = imagf( start );\n\t} else {\n\t\tre1 = real( start );\n\t\tim1 = imag( start );\n\t}\n\tif ( dt2 === 'float64' ) {\n\t\tre2 = stop;\n\t\tim2 = 0.0;\n\t} else if ( dt2 === 'complex64' ) {\n\t\tre2 = realf( stop );\n\t\tim2 = imagf( stop );\n\t} else {\n\t\tre2 = real( stop );\n\t\tim2 = imag( stop );\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tout[ 0 ] = re2;\n\t\t\tout[ 1 ] = im2;\n\t\t} else {\n\t\t\tout[ 0 ] = re1;\n\t\t\tout[ 1 ] = im1;\n\t\t}\n\t\treturn out;\n\t}\n\tout[ 0 ] = re1;\n\tout[ 1 ] = im1;\n\n\t// Calculate the increments:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\tdr = ( re2-re1 ) / N;\n\tdi = ( im2-im1 ) / N;\n\n\t// Generate linearly spaced complex numbers:\n\tj = 2;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tout[ j ] = re1 + (dr*i);\n\t\tout[ j+1 ] = im1 + (di*i);\n\t\tj += 2;\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tout[ j ] = re2;\n\t\tout[ j+1 ] = im2;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @param {boolean} [options.endpoint] - boolean indicating whether the `stop` value in the output array\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'endpoint': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !isString( opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dtype', opts.dtype ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'endpoint' ) ) {\n\t\topts.endpoint = options.endpoint;\n\t\tif ( !isBoolean( opts.endpoint ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'endpoint', opts.endpoint ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar dtype = require( '@stdlib/complex-dtype' );\nvar ctors = require( '@stdlib/array-typed-float-ctors' );\nvar reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpret128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar format = require( '@stdlib/string-format' );\nvar genreal = require( './generic_real.js' );\nvar gencmplx = require( './generic_complex.js' );\nvar typedreal = require( './typed_real.js' );\nvar typedcmplx = require( './typed_complex.js' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced array over a specified interval.\n*\n* @param {(number|ComplexLike)} start - start of interval\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {Options} [options] - options\n* @param {string} [options.dtype] - output array data type\n* @param {boolean} [options.endpoint=true] - boolean indicating whether to include the `stop` value in the output array\n* @throws {TypeError} first argument must be either a real or complex number\n* @throws {TypeError} second argument must be either a real or complex number\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {TypeError} last argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} the output array data type must be a complex number data type or \"generic\" when either `start` or `stop` is a complex number\n* @throws {TypeError} the output array data type must be a real or complex floating-point number data type or \"generic\"\n* @returns {(Array|TypedArray|ComplexArray)} linearly spaced array\n*\n* @example\n* var arr = linspace( 0, 100, 6, {\n*     'dtype': 'generic'\n* });\n* // returns [ 0, 20, 40, 60, 80, 100 ]\n*/\nfunction linspace( start, stop, len ) {\n\tvar opts;\n\tvar ctor;\n\tvar err;\n\tvar out;\n\tvar dt1;\n\tvar dt2;\n\tvar flg;\n\n\tif ( typeof start === 'object' ) {\n\t\tdt1 = dtype( start );\n\t\tif ( dt1 === null ) {\n\t\t\tif ( !isComplexLike( start ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a real or complex number. Value: `%s`.', start ) );\n\t\t\t}\n\t\t\tdt1 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a real or complex number. Value: `%s`.', start ) );\n\t} else {\n\t\tdt1 = 'float64';\n\t}\n\tif ( typeof stop === 'object' ) {\n\t\tdt2 = dtype( stop );\n\t\tif ( dt2 === null ) {\n\t\t\tif ( !isComplexLike( stop ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a real or complex number. Value: `%s`.', stop ) );\n\t\t\t}\n\t\t\tdt2 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( stop ) || isnan( stop ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a real or complex number. Value: `%s`.', stop ) );\n\t} else {\n\t\tdt2 = 'float64';\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t}\n\topts = {\n\t\t'endpoint': defaults.endpoint\n\t};\n\tif ( dt1 === dt2 ) {\n\t\topts.dtype = dt1; // one of 'float64' || 'complex64' || 'complex128'\n\t} else {\n\t\t// If dtypes are different, then at least one is a complex number. According to type promotion rules, for all possible dtype permutations, the default output data type should be 'complex128'...\n\t\topts.dtype = 'complex128';\n\t}\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, arguments[ 3 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.dtype === 'generic' ) {\n\t\tif ( flg ) {\n\t\t\treturn gencmplx( dt1, start, dt2, stop, len, opts.endpoint );\n\t\t}\n\t\treturn genreal( start, stop, len, opts.endpoint );\n\t}\n\tctor = ctors( opts.dtype );\n\tif ( ctor === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. `%s` option must be a real or complex floating-point data type or \"generic\". Option: `%s`.', 'dtype', opts.dtype ) );\n\t}\n\tout = new ctor( len );\n\tif ( opts.dtype === 'complex64' ) {\n\t\ttypedcmplx( reinterpret64( out, 0 ), dt1, start, dt2, stop, len, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( opts.dtype === 'complex128' ) {\n\t\ttypedcmplx( reinterpret128( out, 0 ), dt1, start, dt2, stop, len, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( flg ) {\n\t\tthrow new TypeError( 'invalid arguments. If either of the first two arguments are complex numbers, the output array data type must be a complex number data type or \"generic\".' );\n\t}\n\treturn typedreal( out, start, stop, len, opts.endpoint );\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Complex64 = require( '@stdlib/complex-float32' );\nvar Complex128 = require( '@stdlib/complex-float64' );\nvar real = require( '@stdlib/complex-real' );\nvar imag = require( '@stdlib/complex-imag' );\nvar realf = require( '@stdlib/complex-realf' );\nvar imagf = require( '@stdlib/complex-imagf' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced complex number sequence over a specified interval and assigns results to a provided output array.\n*\n* @private\n* @param {Object} out - output array object\n* @param {ArrayLikeObject} out.data - output array data\n* @param {Function} out.setter - accessor for setting array elements\n* @param {string} dt1 - start value data type\n* @param {ComplexLike} start - start of interval\n* @param {string} dt2 - stop value data type\n* @param {ComplexLike} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Object} output array object\n*/\nfunction linspace( out, dt1, start, dt2, stop, len, endpoint ) {\n\tvar cmplx;\n\tvar isf32;\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\tvar set;\n\tvar buf;\n\tvar re;\n\tvar im;\n\tvar dr;\n\tvar di;\n\tvar N;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\tisf32 = 0;\n\tif ( dt1 === 'float64' ) {\n\t\tre1 = start;\n\t\tim1 = 0.0;\n\t} else if ( dt1 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre1 = realf( start );\n\t\tim1 = imagf( start );\n\t} else {\n\t\tre1 = real( start );\n\t\tim1 = imag( start );\n\t}\n\tif ( dt2 === 'float64' ) {\n\t\tre2 = stop;\n\t\tim2 = 0.0;\n\t} else if ( dt2 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre2 = realf( stop );\n\t\tim2 = imagf( stop );\n\t} else {\n\t\tre2 = real( stop );\n\t\tim2 = imag( stop );\n\t}\n\t// Determine which complex number constructor to use according to type promotion rules:\n\tif ( isf32 === 2 ) {\n\t\tcmplx = Complex64;\n\t} else {\n\t\tcmplx = Complex128;\n\t}\n\t// Cache array object references:\n\tbuf = out.data;\n\tset = out.setter;\n\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tset( buf, 0, new cmplx( re2, im2 ) );\n\t\t} else {\n\t\t\tset( buf, 0, new cmplx( re1, im1 ) );\n\t\t}\n\t\treturn out;\n\t}\n\tset( buf, 0, new cmplx( re1, im1 ) );\n\n\t// Calculate the increments:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\tdr = ( re2-re1 ) / N;\n\tdi = ( im2-im1 ) / N;\n\n\t// Generate the linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tre = re1 + (dr*i);\n\t\tim = im1 + (di*i);\n\t\tset( buf, i, new cmplx( re, im ) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tset( buf, N, new cmplx( re2, im2 ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Generates a linearly spaced sequence over a specified interval and assigns results to a provided output array.\n*\n* @private\n* @param {Object} out - output array object\n* @param {ArrayLikeObject} out.data - output array data\n* @param {Function} out.setter - accessor for setting array elements\n* @param {number} start - start of interval\n* @param {number} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Object} output array object\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function set( buf, i, v ) {\n*     buf[ i ] = v * 2.0;\n* }\n*\n* var out = new Float64Array( 6 );\n* var obj = {\n*     'data': out,\n*     'setter': set\n* };\n* linspace( obj, 0, 100, out.length, true );\n*\n* var arr = obj.data;\n* // returns <Float64Array>[ 0.0, 40.0, 80.0, 120.0, 160.0, 200.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function set( buf, i, v ) {\n*     buf[ i ] = v * 2.0;\n* }\n*\n* var out = new Float64Array( 5 );\n* var obj = {\n*     'data': out,\n*     'setter': set\n* };\n* linspace( obj, 0, 100, out.length, false );\n*\n* var arr = obj.data;\n* // returns <Float64Array>[ 0.0, 40.0, 80.0, 120.0, 160.0 ]\n*/\nfunction linspace( out, start, stop, len, endpoint ) {\n\tvar buf;\n\tvar set;\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\t// Cache array object references:\n\tbuf = out.data;\n\tset = out.setter;\n\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tset( buf, 0, stop );\n\t\t} else {\n\t\t\tset( buf, 0, start );\n\t\t}\n\t\treturn out;\n\t}\n\tset( buf, 0, start );\n\n\t// Calculate the increment:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\td = ( stop-start ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tset( buf, i, start + (d*i) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tset( buf, N, stop );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar dtype = require( '@stdlib/complex-dtype' );\nvar adtype = require( '@stdlib/array-dtype' );\nvar reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpret128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar acccmplx = require( './accessors_complex.js' );\nvar accreal = require( './accessors_real.js' );\nvar typedcmplx = require( './typed_complex.js' );\nvar typedreal = require( './typed_real.js' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced sequence over a specified interval and assigns the results to a provided output array.\n*\n* @param {(number|ComplexLike)} start - start of interval\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {Collection} out - output array\n* @param {Options} [options] - options\n* @param {boolean} [options.endpoint=true] - boolean indicating whether to include the `stop` value in the output array\n* @throws {TypeError} first argument must be either a real or complex number\n* @throws {TypeError} second argument must be either a real or complex number\n* @throws {TypeError} third argument must be an array-like object\n* @throws {TypeError} last argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} the output array data type must be a complex number data type or \"generic\" when either `start` or `stop` is a complex number\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var out = new Float64Array( 6 );\n* var arr = linspace( 0, 100, out );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*/\nfunction linspace( start, stop, out ) {\n\tvar opts;\n\tvar err;\n\tvar dt1;\n\tvar dt2;\n\tvar flg;\n\tvar odt;\n\tvar o;\n\n\tif ( typeof start === 'object' ) {\n\t\tdt1 = dtype( start );\n\t\tif ( dt1 === null ) {\n\t\t\tif ( !isComplexLike( start ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a real or complex number. Value: `%s`.', start ) );\n\t\t\t}\n\t\t\tdt1 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a real or complex number. Value: `%s`.', start ) );\n\t} else {\n\t\tdt1 = 'float64';\n\t}\n\tif ( typeof stop === 'object' ) {\n\t\tdt2 = dtype( stop );\n\t\tif ( dt2 === null ) {\n\t\t\tif ( !isComplexLike( stop ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a real or complex number. Value: `%s`.', stop ) );\n\t\t\t}\n\t\t\tdt2 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( stop ) || isnan( stop ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a real or complex number. Value: `%s`.', stop ) );\n\t} else {\n\t\tdt2 = 'float64';\n\t}\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array-like object. Value: `%s`.', out ) );\n\t}\n\topts = {\n\t\t'endpoint': defaults.endpoint\n\t};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, arguments[ 3 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\todt = adtype( out );\n\tif ( odt === null ) {\n\t\todt = 'generic';\n\t}\n\tif ( odt === 'complex64' ) {\n\t\ttypedcmplx( reinterpret64( out, 0 ), dt1, start, dt2, stop, out.length, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( odt === 'complex128' ) {\n\t\ttypedcmplx( reinterpret128( out, 0 ), dt1, start, dt2, stop, out.length, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( flg ) {\n\t\tif ( odt === 'generic' ) {\n\t\t\to = arraylike2object( out );\n\t\t\tacccmplx( o, dt1, start, dt2, stop, out.length, opts.endpoint );\n\t\t\treturn out;\n\t\t}\n\t\tthrow new TypeError( 'invalid arguments. If either of the first two arguments are complex numbers, the output array must be a complex number array or a \"generic\" array-like object.' );\n\t}\n\to = arraylike2object( out );\n\tif ( o.accessors ) {\n\t\taccreal( o, start, stop, out.length, opts.endpoint );\n\t\treturn out;\n\t}\n\ttypedreal( out, start, stop, out.length, opts.endpoint );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a linearly spaced array.\n*\n* @module @stdlib/array-linspace\n*\n* @example\n* var linspace = require( '@stdlib/array-linspace' );\n*\n* var arr = linspace( 0, 100, 6 );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*\n* @example\n* var linspace = require( '@stdlib/array-linspace' );\n*\n* var arr = linspace( 0, 100, 5, {\n*     'endpoint': false\n* });\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var linspace = require( '@stdlib/array-linspace' );\n*\n* var arr = new Float64Array( 6 );\n* var out = linspace.assign( 0, 100, out );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var linspace = require( '@stdlib/array-linspace' );\n*\n* var arr = new Float64Array( 5 );\n* var out = linspace.assign( 0, 100, out, {\n*     'endpoint': false\n* });\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["generic_real","start","stop","len","endpoint","arr","N","d","i","push","Complex64","require$$0","Complex128","require$$1","real","require$$2","imag","require$$3","realf","require$$4","imagf","require$$5","generic_complex","dt1","dt2","cmplx","isf32","re1","re2","im1","im2","re","im","dr","di","typed_real","out","typed_complex","j","isObject","hasOwnProp","isString","isPrimitive","isBoolean","format","validate_1","opts","options","dtype","TypeError","isComplexLike","isNumber","isNonNegativeInteger","isnan","ctors","reinterpret64","require$$6","reinterpret128","require$$7","require$$8","genreal","require$$9","gencmplx","require$$10","typedreal","require$$11","typedcmplx","require$$12","validate","require$$13","defaults","require$$14","main","ctor","err","flg","arguments","length","accessors_complex","set","buf","data","setter","accessors_real","isCollection","adtype","arraylike2object","acccmplx","accreal","require$$15","assign","odt","o","accessors","lib"],"mappings":"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"}