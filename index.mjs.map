{"version":3,"file":"index.mjs","sources":["../lib/typed_real.js","../lib/typed_complex.js","../lib/validate.js","../lib/main.js","../lib/generic_complex.js","../lib/generic_real.js","../lib/assign.js","../lib/accessors_complex.js","../lib/accessors_real.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Generates a linearly spaced sequence over a specified interval and assigns the results to a provided output array.\n*\n* @private\n* @param {TypedArray} out - output array\n* @param {number} start - start of interval\n* @param {number} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {TypedArray} linearly spaced array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var out = new Float64Array( 6 );\n* var arr = linspace( out, 0, 100, out.length, true );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var out = new Float64Array( 5 );\n* var arr = linspace( out, 0, 100, out.length, false );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0 ]\n*/\nfunction linspace( out, start, stop, len, endpoint ) {\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tout[ 0 ] = stop;\n\t\t} else {\n\t\t\tout[ 0 ] = start;\n\t\t}\n\t\treturn out;\n\t}\n\tout[ 0 ] = start;\n\n\t// Calculate the increment:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\td = ( stop-start ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tout[ i ] = start + (d*i);\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tout[ N ] = stop;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced complex number sequence over a specified interval and assigns the results to a provided output array strided view.\n*\n* @private\n* @param {(Float32Array|Float64Array)} out - output array strided view\n* @param {string} dt1 - start value data type\n* @param {(number|ComplexLike)} start - start of interval\n* @param {string} dt2 - stop value data type\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {(Float32Array|Float64Array)} complex number array view\n*/\nfunction linspace( out, dt1, start, dt2, stop, len, endpoint ) {\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\tvar dr;\n\tvar di;\n\tvar N;\n\tvar i;\n\tvar j;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\tif ( dt1 === 'float64' ) {\n\t\tre1 = start;\n\t\tim1 = 0.0;\n\t} else if ( dt1 === 'complex64' ) {\n\t\tre1 = realf( start );\n\t\tim1 = imagf( start );\n\t} else {\n\t\tre1 = real( start );\n\t\tim1 = imag( start );\n\t}\n\tif ( dt2 === 'float64' ) {\n\t\tre2 = stop;\n\t\tim2 = 0.0;\n\t} else if ( dt2 === 'complex64' ) {\n\t\tre2 = realf( stop );\n\t\tim2 = imagf( stop );\n\t} else {\n\t\tre2 = real( stop );\n\t\tim2 = imag( stop );\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tout[ 0 ] = re2;\n\t\t\tout[ 1 ] = im2;\n\t\t} else {\n\t\t\tout[ 0 ] = re1;\n\t\t\tout[ 1 ] = im1;\n\t\t}\n\t\treturn out;\n\t}\n\tout[ 0 ] = re1;\n\tout[ 1 ] = im1;\n\n\t// Calculate the increments:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\tdr = ( re2-re1 ) / N;\n\tdi = ( im2-im1 ) / N;\n\n\t// Generate linearly spaced complex numbers:\n\tj = 2;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tout[ j ] = re1 + (dr*i);\n\t\tout[ j+1 ] = im1 + (di*i);\n\t\tj += 2;\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tout[ j ] = re2;\n\t\tout[ j+1 ] = im2;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @param {boolean} [options.endpoint] - boolean indicating whether the `stop` value in the output array\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'endpoint': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0132V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !isString( opts.dtype ) ) {\n\t\t\treturn new TypeError( format( '0132W', 'dtype', opts.dtype ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'endpoint' ) ) {\n\t\topts.endpoint = options.endpoint;\n\t\tif ( !isBoolean( opts.endpoint ) ) {\n\t\t\treturn new TypeError( format( '0132o', 'endpoint', opts.endpoint ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport dtype from '@stdlib/complex-dtype';\nimport ctors from '@stdlib/array-typed-float-ctors';\nimport reinterpret64 from '@stdlib/strided-base-reinterpret-complex64';\nimport reinterpret128 from '@stdlib/strided-base-reinterpret-complex128';\nimport DEFAULTS from '@stdlib/array-defaults';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport genreal from './generic_real.js';\nimport gencmplx from './generic_complex.js';\nimport typedreal from './typed_real.js';\nimport typedcmplx from './typed_complex.js';\nimport validate from './validate.js';\nimport defaults from './defaults.json';\n\n\n// VARIABLES //\n\nvar DEFAULT_COMPLEX_DTYPE = DEFAULTS.get( 'dtypes.complex_floating_point' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced array over a specified interval.\n*\n* @param {(number|ComplexLike)} start - start of interval\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {Options} [options] - options\n* @param {string} [options.dtype] - output array data type\n* @param {boolean} [options.endpoint=true] - boolean indicating whether to include the `stop` value in the output array\n* @throws {TypeError} first argument must be either a real or complex number\n* @throws {TypeError} second argument must be either a real or complex number\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {TypeError} last argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} the output array data type must be a complex number data type or \"generic\" when either `start` or `stop` is a complex number\n* @throws {TypeError} the output array data type must be a real or complex floating-point number data type or \"generic\"\n* @returns {(Array|TypedArray|ComplexArray)} linearly spaced array\n*\n* @example\n* var arr = linspace( 0, 100, 6, {\n*     'dtype': 'generic'\n* });\n* // returns [ 0, 20, 40, 60, 80, 100 ]\n*/\nfunction linspace( start, stop, len ) {\n\tvar opts;\n\tvar ctor;\n\tvar err;\n\tvar out;\n\tvar dt1;\n\tvar dt2;\n\tvar flg;\n\n\tif ( typeof start === 'object' ) {\n\t\tdt1 = dtype( start );\n\t\tif ( dt1 === null ) {\n\t\t\tif ( !isComplexLike( start ) ) {\n\t\t\t\tthrow new TypeError( format( '0132j', start ) );\n\t\t\t}\n\t\t\tdt1 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( format( '0132j', start ) );\n\t} else {\n\t\tdt1 = 'float64';\n\t}\n\tif ( typeof stop === 'object' ) {\n\t\tdt2 = dtype( stop );\n\t\tif ( dt2 === null ) {\n\t\t\tif ( !isComplexLike( stop ) ) {\n\t\t\t\tthrow new TypeError( format( '0132k', stop ) );\n\t\t\t}\n\t\t\tdt2 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( stop ) || isnan( stop ) ) {\n\t\tthrow new TypeError( format( '0132k', stop ) );\n\t} else {\n\t\tdt2 = 'float64';\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( '0132m', len ) );\n\t}\n\topts = {\n\t\t'endpoint': defaults.endpoint\n\t};\n\tif ( dt1 === dt2 ) {\n\t\topts.dtype = dt1; // one of 'float64' || 'complex64' || 'complex128'\n\t} else {\n\t\t// If dtypes are different, then at least one is a complex number. According to type promotion rules, for all possible dtype permutations, the default output data type should be 'complex128'...\n\t\topts.dtype = DEFAULT_COMPLEX_DTYPE;\n\t}\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, arguments[ 3 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.dtype === 'generic' ) {\n\t\tif ( flg ) {\n\t\t\treturn gencmplx( dt1, start, dt2, stop, len, opts.endpoint );\n\t\t}\n\t\treturn genreal( start, stop, len, opts.endpoint );\n\t}\n\tctor = ctors( opts.dtype );\n\tif ( ctor === null ) {\n\t\tthrow new TypeError( format( '0132n', 'dtype', opts.dtype ) );\n\t}\n\tout = new ctor( len );\n\tif ( opts.dtype === 'complex64' ) {\n\t\ttypedcmplx( reinterpret64( out, 0 ), dt1, start, dt2, stop, len, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( opts.dtype === 'complex128' ) {\n\t\ttypedcmplx( reinterpret128( out, 0 ), dt1, start, dt2, stop, len, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( flg ) {\n\t\tthrow new TypeError( format('01308') );\n\t}\n\treturn typedreal( out, start, stop, len, opts.endpoint );\n}\n\n\n// EXPORTS //\n\nexport default linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex64 from '@stdlib/complex-float32-ctor';\nimport Complex128 from '@stdlib/complex-float64-ctor';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced complex number array over a specified interval.\n*\n* @private\n* @param {string} dt1 - start value data type\n* @param {(number|ComplexLike)} start - start of interval\n* @param {string} dt2 - stop value data type\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Array} linearly spaced array\n*/\nfunction linspace( dt1, start, dt2, stop, len, endpoint ) {\n\tvar cmplx;\n\tvar isf32;\n\tvar arr;\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\tvar re;\n\tvar im;\n\tvar dr;\n\tvar di;\n\tvar N;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn [];\n\t}\n\tisf32 = 0;\n\tif ( dt1 === 'float64' ) {\n\t\tre1 = start;\n\t\tim1 = 0.0;\n\t} else if ( dt1 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre1 = realf( start );\n\t\tim1 = imagf( start );\n\t} else {\n\t\tre1 = real( start );\n\t\tim1 = imag( start );\n\t}\n\tif ( dt2 === 'float64' ) {\n\t\tre2 = stop;\n\t\tim2 = 0.0;\n\t} else if ( dt2 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre2 = realf( stop );\n\t\tim2 = imagf( stop );\n\t} else {\n\t\tre2 = real( stop );\n\t\tim2 = imag( stop );\n\t}\n\t// Determine which complex number constructor to use according to type promotion rules:\n\tif ( isf32 === 2 ) {\n\t\tcmplx = Complex64;\n\t} else {\n\t\tcmplx = Complex128;\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\treturn [ new cmplx( re2, im2 ) ];\n\t\t}\n\t\treturn [ new cmplx( re1, im1 ) ];\n\t}\n\tarr = [ new cmplx( re1, im1 ) ];\n\n\t// Calculate the increments:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\tdr = ( re2-re1 ) / N;\n\tdi = ( im2-im1 ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tre = re1 + (dr*i);\n\t\tim = im1 + (di*i);\n\t\tarr.push( new cmplx( re, im ) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tarr.push( new cmplx( re2, im2 ) );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Generates a linearly spaced array over a specified interval.\n*\n* @private\n* @param {number} start - start of interval\n* @param {number} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Array} linearly spaced array\n*\n* @example\n* var arr = linspace( 0, 100, 6, true );\n* // returns [ 0, 20, 40, 60, 80, 100 ]\n*\n* @example\n* var arr = linspace( 0, 100, 5, false );\n* // returns [ 0, 20, 40, 60, 80 ]\n*/\nfunction linspace( start, stop, len, endpoint ) {\n\tvar arr;\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn [];\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\treturn [ stop ];\n\t\t}\n\t\treturn [ start ];\n\t}\n\tarr = [ start ];\n\n\t// Calculate the increment:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\td = ( stop-start ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tarr.push( start + (d*i) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tarr.push( stop );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isCollection from '@stdlib/assert-is-collection';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport dtype from '@stdlib/complex-dtype';\nimport adtype from '@stdlib/array-dtype';\nimport reinterpret64 from '@stdlib/strided-base-reinterpret-complex64';\nimport reinterpret128 from '@stdlib/strided-base-reinterpret-complex128';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport acccmplx from './accessors_complex.js';\nimport accreal from './accessors_real.js';\nimport typedcmplx from './typed_complex.js';\nimport typedreal from './typed_real.js';\nimport validate from './validate.js';\nimport defaults from './defaults.json';\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced sequence over a specified interval and assigns the results to a provided output array.\n*\n* @param {(number|ComplexLike)} start - start of interval\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {Collection} out - output array\n* @param {Options} [options] - options\n* @param {boolean} [options.endpoint=true] - boolean indicating whether to include the `stop` value in the output array\n* @throws {TypeError} first argument must be either a real or complex number\n* @throws {TypeError} second argument must be either a real or complex number\n* @throws {TypeError} third argument must be an array-like object\n* @throws {TypeError} last argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} the output array data type must be a complex number data type or \"generic\" when either `start` or `stop` is a complex number\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var out = new Float64Array( 6 );\n* var arr = linspace( 0, 100, out );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*/\nfunction linspace( start, stop, out ) {\n\tvar opts;\n\tvar err;\n\tvar dt1;\n\tvar dt2;\n\tvar flg;\n\tvar odt;\n\tvar o;\n\n\tif ( typeof start === 'object' ) {\n\t\tdt1 = dtype( start );\n\t\tif ( dt1 === null ) {\n\t\t\tif ( !isComplexLike( start ) ) {\n\t\t\t\tthrow new TypeError( format( '0132j', start ) );\n\t\t\t}\n\t\t\tdt1 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( format( '0132j', start ) );\n\t} else {\n\t\tdt1 = 'float64';\n\t}\n\tif ( typeof stop === 'object' ) {\n\t\tdt2 = dtype( stop );\n\t\tif ( dt2 === null ) {\n\t\t\tif ( !isComplexLike( stop ) ) {\n\t\t\t\tthrow new TypeError( format( '0132k', stop ) );\n\t\t\t}\n\t\t\tdt2 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( stop ) || isnan( stop ) ) {\n\t\tthrow new TypeError( format( '0132k', stop ) );\n\t} else {\n\t\tdt2 = 'float64';\n\t}\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( '0132l', out ) );\n\t}\n\topts = {\n\t\t'endpoint': defaults.endpoint\n\t};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, arguments[ 3 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\todt = adtype( out );\n\tif ( odt === null ) {\n\t\todt = 'generic';\n\t}\n\tif ( odt === 'complex64' ) {\n\t\ttypedcmplx( reinterpret64( out, 0 ), dt1, start, dt2, stop, out.length, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( odt === 'complex128' ) {\n\t\ttypedcmplx( reinterpret128( out, 0 ), dt1, start, dt2, stop, out.length, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( flg ) {\n\t\tif ( odt === 'generic' ) {\n\t\t\to = arraylike2object( out );\n\t\t\tacccmplx( o, dt1, start, dt2, stop, out.length, opts.endpoint );\n\t\t\treturn out;\n\t\t}\n\t\tthrow new TypeError( format('01307') );\n\t}\n\to = arraylike2object( out );\n\tif ( o.accessorProtocol ) {\n\t\taccreal( o, start, stop, out.length, opts.endpoint );\n\t\treturn out;\n\t}\n\ttypedreal( out, start, stop, out.length, opts.endpoint );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex64 from '@stdlib/complex-float32-ctor';\nimport Complex128 from '@stdlib/complex-float64-ctor';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced complex number sequence over a specified interval and assigns results to a provided output array.\n*\n* @private\n* @param {Object} out - output array object\n* @param {ArrayLikeObject} out.data - output array data\n* @param {Array<Function>} out.accessors - array element accessors\n* @param {string} dt1 - start value data type\n* @param {ComplexLike} start - start of interval\n* @param {string} dt2 - stop value data type\n* @param {ComplexLike} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Object} output array object\n*/\nfunction linspace( out, dt1, start, dt2, stop, len, endpoint ) {\n\tvar cmplx;\n\tvar isf32;\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\tvar set;\n\tvar buf;\n\tvar re;\n\tvar im;\n\tvar dr;\n\tvar di;\n\tvar N;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\tisf32 = 0;\n\tif ( dt1 === 'float64' ) {\n\t\tre1 = start;\n\t\tim1 = 0.0;\n\t} else if ( dt1 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre1 = realf( start );\n\t\tim1 = imagf( start );\n\t} else {\n\t\tre1 = real( start );\n\t\tim1 = imag( start );\n\t}\n\tif ( dt2 === 'float64' ) {\n\t\tre2 = stop;\n\t\tim2 = 0.0;\n\t} else if ( dt2 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre2 = realf( stop );\n\t\tim2 = imagf( stop );\n\t} else {\n\t\tre2 = real( stop );\n\t\tim2 = imag( stop );\n\t}\n\t// Determine which complex number constructor to use according to type promotion rules:\n\tif ( isf32 === 2 ) {\n\t\tcmplx = Complex64;\n\t} else {\n\t\tcmplx = Complex128;\n\t}\n\t// Cache array object references:\n\tbuf = out.data;\n\tset = out.accessors[ 1 ];\n\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tset( buf, 0, new cmplx( re2, im2 ) );\n\t\t} else {\n\t\t\tset( buf, 0, new cmplx( re1, im1 ) );\n\t\t}\n\t\treturn out;\n\t}\n\tset( buf, 0, new cmplx( re1, im1 ) );\n\n\t// Calculate the increments:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\tdr = ( re2-re1 ) / N;\n\tdi = ( im2-im1 ) / N;\n\n\t// Generate the linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tre = re1 + (dr*i);\n\t\tim = im1 + (di*i);\n\t\tset( buf, i, new cmplx( re, im ) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tset( buf, N, new cmplx( re2, im2 ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Generates a linearly spaced sequence over a specified interval and assigns results to a provided output array.\n*\n* @private\n* @param {Object} out - output array object\n* @param {ArrayLikeObject} out.data - output array data\n* @param {Array<Function>} out.accessors - array element accessors\n* @param {number} start - start of interval\n* @param {number} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Object} output array object\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function set( buf, i, v ) {\n*     buf[ i ] = v * 2.0;\n* }\n*\n* var out = new Float64Array( 6 );\n* var obj = {\n*     'data': out,\n*     'accessors': [ null, set ]\n* };\n* linspace( obj, 0, 100, out.length, true );\n*\n* var arr = obj.data;\n* // returns <Float64Array>[ 0.0, 40.0, 80.0, 120.0, 160.0, 200.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function set( buf, i, v ) {\n*     buf[ i ] = v * 2.0;\n* }\n*\n* var out = new Float64Array( 5 );\n* var obj = {\n*     'data': out,\n*     'accessors': [ null, set ]\n* };\n* linspace( obj, 0, 100, out.length, false );\n*\n* var arr = obj.data;\n* // returns <Float64Array>[ 0.0, 40.0, 80.0, 120.0, 160.0 ]\n*/\nfunction linspace( out, start, stop, len, endpoint ) {\n\tvar buf;\n\tvar set;\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\t// Cache array object references:\n\tbuf = out.data;\n\tset = out.accessors[ 1 ];\n\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tset( buf, 0, stop );\n\t\t} else {\n\t\t\tset( buf, 0, start );\n\t\t}\n\t\treturn out;\n\t}\n\tset( buf, 0, start );\n\n\t// Calculate the increment:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\td = ( stop-start ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tset( buf, i, start + (d*i) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tset( buf, N, stop );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default linspace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a linearly spaced array.\n*\n* @module @stdlib/array-linspace\n*\n* @example\n* import linspace from '@stdlib/array-linspace';\n*\n* var arr = linspace( 0, 100, 6 );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*\n* @example\n* import linspace from '@stdlib/array-linspace';\n*\n* var arr = linspace( 0, 100, 5, {\n*     'endpoint': false\n* });\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import linspace from '@stdlib/array-linspace';\n*\n* var arr = new Float64Array( 6 );\n* var out = linspace.assign( 0, 100, out );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import linspace from '@stdlib/array-linspace';\n*\n* var arr = new Float64Array( 5 );\n* var out = linspace.assign( 0, 100, out, {\n*     'endpoint': false\n* });\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["linspace","out","start","stop","len","endpoint","N","d","i","dt1","dt2","re1","re2","im1","im2","dr","di","j","realf","imagf","real","imag","validate","opts","options","isObject","hasOwnProp","dtype","isString","TypeError","format","isBoolean","DEFAULT_COMPLEX_DTYPE","DEFAULTS","get","ctor","err","flg","isComplexLike","isNumber","isnan","isNonNegativeInteger","defaults","arguments","length","cmplx","isf32","arr","re","im","Complex64","Complex128","push","gencmplx","genreal","ctors","typedcmplx","reinterpret64","reinterpret128","typedreal","odt","o","isCollection","adtype","set","buf","data","accessors","acccmplx","arraylike2object","accessorProtocol","accreal","setReadOnly","main","assign"],"mappings":"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"}