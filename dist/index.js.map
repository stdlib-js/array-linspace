{
  "version": 3,
  "sources": ["../lib/generic_real.js", "../lib/generic_complex.js", "../lib/typed_real.js", "../lib/typed_complex.js", "../lib/validate.js", "../lib/defaults.json", "../lib/main.js", "../lib/accessors_complex.js", "../lib/accessors_real.js", "../lib/assign.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Generates a linearly spaced array over a specified interval.\n*\n* @private\n* @param {number} start - start of interval\n* @param {number} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Array} linearly spaced array\n*\n* @example\n* var arr = linspace( 0, 100, 6, true );\n* // returns [ 0, 20, 40, 60, 80, 100 ]\n*\n* @example\n* var arr = linspace( 0, 100, 5, false );\n* // returns [ 0, 20, 40, 60, 80 ]\n*/\nfunction linspace( start, stop, len, endpoint ) {\n\tvar arr;\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn [];\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\treturn [ stop ];\n\t\t}\n\t\treturn [ start ];\n\t}\n\tarr = [ start ];\n\n\t// Calculate the increment:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\td = ( stop-start ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tarr.push( start + (d*i) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tarr.push( stop );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Complex64 = require( '@stdlib/complex-float32' );\nvar Complex128 = require( '@stdlib/complex-float64' );\nvar real = require( '@stdlib/complex-real' );\nvar imag = require( '@stdlib/complex-imag' );\nvar realf = require( '@stdlib/complex-realf' );\nvar imagf = require( '@stdlib/complex-imagf' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced complex number array over a specified interval.\n*\n* @private\n* @param {string} dt1 - start value data type\n* @param {(number|ComplexLike)} start - start of interval\n* @param {string} dt2 - stop value data type\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Array} linearly spaced array\n*/\nfunction linspace( dt1, start, dt2, stop, len, endpoint ) {\n\tvar cmplx;\n\tvar isf32;\n\tvar arr;\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\tvar re;\n\tvar im;\n\tvar dr;\n\tvar di;\n\tvar N;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn [];\n\t}\n\tisf32 = 0;\n\tif ( dt1 === 'float64' ) {\n\t\tre1 = start;\n\t\tim1 = 0.0;\n\t} else if ( dt1 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre1 = realf( start );\n\t\tim1 = imagf( start );\n\t} else {\n\t\tre1 = real( start );\n\t\tim1 = imag( start );\n\t}\n\tif ( dt2 === 'float64' ) {\n\t\tre2 = stop;\n\t\tim2 = 0.0;\n\t} else if ( dt2 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre2 = realf( stop );\n\t\tim2 = imagf( stop );\n\t} else {\n\t\tre2 = real( stop );\n\t\tim2 = imag( stop );\n\t}\n\t// Determine which complex number constructor to use according to type promotion rules:\n\tif ( isf32 === 2 ) {\n\t\tcmplx = Complex64;\n\t} else {\n\t\tcmplx = Complex128;\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\treturn [ new cmplx( re2, im2 ) ];\n\t\t}\n\t\treturn [ new cmplx( re1, im1 ) ];\n\t}\n\tarr = [ new cmplx( re1, im1 ) ];\n\n\t// Calculate the increments:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\tdr = ( re2-re1 ) / N;\n\tdi = ( im2-im1 ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tre = re1 + (dr*i);\n\t\tim = im1 + (di*i);\n\t\tarr.push( new cmplx( re, im ) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tarr.push( new cmplx( re2, im2 ) );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Generates a linearly spaced sequence over a specified interval and assigns the results to a provided output array.\n*\n* @private\n* @param {TypedArray} out - output array\n* @param {number} start - start of interval\n* @param {number} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {TypedArray} linearly spaced array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var out = new Float64Array( 6 );\n* var arr = linspace( out, 0, 100, out.length, true );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var out = new Float64Array( 5 );\n* var arr = linspace( out, 0, 100, out.length, false );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0 ]\n*/\nfunction linspace( out, start, stop, len, endpoint ) {\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tout[ 0 ] = stop;\n\t\t} else {\n\t\t\tout[ 0 ] = start;\n\t\t}\n\t\treturn out;\n\t}\n\tout[ 0 ] = start;\n\n\t// Calculate the increment:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\td = ( stop-start ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tout[ i ] = start + (d*i);\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tout[ N ] = stop;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar real = require( '@stdlib/complex-real' );\nvar imag = require( '@stdlib/complex-imag' );\nvar realf = require( '@stdlib/complex-realf' );\nvar imagf = require( '@stdlib/complex-imagf' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced complex number sequence over a specified interval and assigns the results to a provided output array strided view.\n*\n* @private\n* @param {(Float32Array|Float64Array)} out - output array strided view\n* @param {string} dt1 - start value data type\n* @param {(number|ComplexLike)} start - start of interval\n* @param {string} dt2 - stop value data type\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {(Float32Array|Float64Array)} complex number array view\n*/\nfunction linspace( out, dt1, start, dt2, stop, len, endpoint ) {\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\tvar dr;\n\tvar di;\n\tvar N;\n\tvar i;\n\tvar j;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\tif ( dt1 === 'float64' ) {\n\t\tre1 = start;\n\t\tim1 = 0.0;\n\t} else if ( dt1 === 'complex64' ) {\n\t\tre1 = realf( start );\n\t\tim1 = imagf( start );\n\t} else {\n\t\tre1 = real( start );\n\t\tim1 = imag( start );\n\t}\n\tif ( dt2 === 'float64' ) {\n\t\tre2 = stop;\n\t\tim2 = 0.0;\n\t} else if ( dt2 === 'complex64' ) {\n\t\tre2 = realf( stop );\n\t\tim2 = imagf( stop );\n\t} else {\n\t\tre2 = real( stop );\n\t\tim2 = imag( stop );\n\t}\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tout[ 0 ] = re2;\n\t\t\tout[ 1 ] = im2;\n\t\t} else {\n\t\t\tout[ 0 ] = re1;\n\t\t\tout[ 1 ] = im1;\n\t\t}\n\t\treturn out;\n\t}\n\tout[ 0 ] = re1;\n\tout[ 1 ] = im1;\n\n\t// Calculate the increments:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\tdr = ( re2-re1 ) / N;\n\tdi = ( im2-im1 ) / N;\n\n\t// Generate linearly spaced complex numbers:\n\tj = 2;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tout[ j ] = re1 + (dr*i);\n\t\tout[ j+1 ] = im1 + (di*i);\n\t\tj += 2;\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tout[ j ] = re2;\n\t\tout[ j+1 ] = im2;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @param {boolean} [options.endpoint] - boolean indicating whether the `stop` value in the output array\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'endpoint': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !isString( opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dtype', opts.dtype ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'endpoint' ) ) {\n\t\topts.endpoint = options.endpoint;\n\t\tif ( !isBoolean( opts.endpoint ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'endpoint', opts.endpoint ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "{\n    \"endpoint\": true\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar dtype = require( '@stdlib/complex-dtype' );\nvar ctors = require( '@stdlib/array-typed-float-ctors' );\nvar reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpret128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar format = require( '@stdlib/string-format' );\nvar genreal = require( './generic_real.js' );\nvar gencmplx = require( './generic_complex.js' );\nvar typedreal = require( './typed_real.js' );\nvar typedcmplx = require( './typed_complex.js' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced array over a specified interval.\n*\n* @param {(number|ComplexLike)} start - start of interval\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {Options} [options] - options\n* @param {string} [options.dtype] - output array data type\n* @param {boolean} [options.endpoint=true] - boolean indicating whether to include the `stop` value in the output array\n* @throws {TypeError} first argument must be either a real or complex number\n* @throws {TypeError} second argument must be either a real or complex number\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {TypeError} last argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} the output array data type must be a complex number data type or \"generic\" when either `start` or `stop` is a complex number\n* @throws {TypeError} the output array data type must be a real or complex floating-point number data type or \"generic\"\n* @returns {(Array|TypedArray|ComplexArray)} linearly spaced array\n*\n* @example\n* var arr = linspace( 0, 100, 6, {\n*     'dtype': 'generic'\n* });\n* // returns [ 0, 20, 40, 60, 80, 100 ]\n*/\nfunction linspace( start, stop, len ) {\n\tvar opts;\n\tvar ctor;\n\tvar err;\n\tvar out;\n\tvar dt1;\n\tvar dt2;\n\tvar flg;\n\n\tif ( typeof start === 'object' ) {\n\t\tdt1 = dtype( start );\n\t\tif ( dt1 === null ) {\n\t\t\tif ( !isComplexLike( start ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a real or complex number. Value: `%s`.', start ) );\n\t\t\t}\n\t\t\tdt1 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a real or complex number. Value: `%s`.', start ) );\n\t} else {\n\t\tdt1 = 'float64';\n\t}\n\tif ( typeof stop === 'object' ) {\n\t\tdt2 = dtype( stop );\n\t\tif ( dt2 === null ) {\n\t\t\tif ( !isComplexLike( stop ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a real or complex number. Value: `%s`.', stop ) );\n\t\t\t}\n\t\t\tdt2 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( stop ) || isnan( stop ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a real or complex number. Value: `%s`.', stop ) );\n\t} else {\n\t\tdt2 = 'float64';\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t}\n\topts = {\n\t\t'endpoint': defaults.endpoint\n\t};\n\tif ( dt1 === dt2 ) {\n\t\topts.dtype = dt1; // one of 'float64' || 'complex64' || 'complex128'\n\t} else {\n\t\t// If dtypes are different, then at least one is a complex number. According to type promotion rules, for all possible dtype permutations, the default output data type should be 'complex128'...\n\t\topts.dtype = 'complex128';\n\t}\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, arguments[ 3 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.dtype === 'generic' ) {\n\t\tif ( flg ) {\n\t\t\treturn gencmplx( dt1, start, dt2, stop, len, opts.endpoint );\n\t\t}\n\t\treturn genreal( start, stop, len, opts.endpoint );\n\t}\n\tctor = ctors( opts.dtype );\n\tif ( ctor === null ) {\n\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a real or complex floating-point data type or \"generic\". Option: `%s`.', 'dtype', opts.dtype ) );\n\t}\n\tout = new ctor( len );\n\tif ( opts.dtype === 'complex64' ) {\n\t\ttypedcmplx( reinterpret64( out, 0 ), dt1, start, dt2, stop, len, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( opts.dtype === 'complex128' ) {\n\t\ttypedcmplx( reinterpret128( out, 0 ), dt1, start, dt2, stop, len, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( flg ) {\n\t\tthrow new TypeError( 'invalid arguments. If either of the first two arguments are complex numbers, the output array data type must be a complex number data type or \"generic\".' );\n\t}\n\treturn typedreal( out, start, stop, len, opts.endpoint );\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Complex64 = require( '@stdlib/complex-float32' );\nvar Complex128 = require( '@stdlib/complex-float64' );\nvar real = require( '@stdlib/complex-real' );\nvar imag = require( '@stdlib/complex-imag' );\nvar realf = require( '@stdlib/complex-realf' );\nvar imagf = require( '@stdlib/complex-imagf' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced complex number sequence over a specified interval and assigns results to a provided output array.\n*\n* @private\n* @param {Object} out - output array object\n* @param {ArrayLikeObject} out.data - output array data\n* @param {Array<Function>} out.accessors - array element accessors\n* @param {string} dt1 - start value data type\n* @param {ComplexLike} start - start of interval\n* @param {string} dt2 - stop value data type\n* @param {ComplexLike} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Object} output array object\n*/\nfunction linspace( out, dt1, start, dt2, stop, len, endpoint ) {\n\tvar cmplx;\n\tvar isf32;\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\tvar set;\n\tvar buf;\n\tvar re;\n\tvar im;\n\tvar dr;\n\tvar di;\n\tvar N;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\tisf32 = 0;\n\tif ( dt1 === 'float64' ) {\n\t\tre1 = start;\n\t\tim1 = 0.0;\n\t} else if ( dt1 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre1 = realf( start );\n\t\tim1 = imagf( start );\n\t} else {\n\t\tre1 = real( start );\n\t\tim1 = imag( start );\n\t}\n\tif ( dt2 === 'float64' ) {\n\t\tre2 = stop;\n\t\tim2 = 0.0;\n\t} else if ( dt2 === 'complex64' ) {\n\t\tisf32 += 1;\n\t\tre2 = realf( stop );\n\t\tim2 = imagf( stop );\n\t} else {\n\t\tre2 = real( stop );\n\t\tim2 = imag( stop );\n\t}\n\t// Determine which complex number constructor to use according to type promotion rules:\n\tif ( isf32 === 2 ) {\n\t\tcmplx = Complex64;\n\t} else {\n\t\tcmplx = Complex128;\n\t}\n\t// Cache array object references:\n\tbuf = out.data;\n\tset = out.accessors[ 1 ];\n\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tset( buf, 0, new cmplx( re2, im2 ) );\n\t\t} else {\n\t\t\tset( buf, 0, new cmplx( re1, im1 ) );\n\t\t}\n\t\treturn out;\n\t}\n\tset( buf, 0, new cmplx( re1, im1 ) );\n\n\t// Calculate the increments:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\tdr = ( re2-re1 ) / N;\n\tdi = ( im2-im1 ) / N;\n\n\t// Generate the linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tre = re1 + (dr*i);\n\t\tim = im1 + (di*i);\n\t\tset( buf, i, new cmplx( re, im ) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tset( buf, N, new cmplx( re2, im2 ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Generates a linearly spaced sequence over a specified interval and assigns results to a provided output array.\n*\n* @private\n* @param {Object} out - output array object\n* @param {ArrayLikeObject} out.data - output array data\n* @param {Array<Function>} out.accessors - array element accessors\n* @param {number} start - start of interval\n* @param {number} stop - end of interval\n* @param {NonNegativeInteger} len - length of output array\n* @param {boolean} endpoint - boolean indicating whether to include `stop` in the output array\n* @returns {Object} output array object\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function set( buf, i, v ) {\n*     buf[ i ] = v * 2.0;\n* }\n*\n* var out = new Float64Array( 6 );\n* var obj = {\n*     'data': out,\n*     'accessors': [ null, set ]\n* };\n* linspace( obj, 0, 100, out.length, true );\n*\n* var arr = obj.data;\n* // returns <Float64Array>[ 0.0, 40.0, 80.0, 120.0, 160.0, 200.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function set( buf, i, v ) {\n*     buf[ i ] = v * 2.0;\n* }\n*\n* var out = new Float64Array( 5 );\n* var obj = {\n*     'data': out,\n*     'accessors': [ null, set ]\n* };\n* linspace( obj, 0, 100, out.length, false );\n*\n* var arr = obj.data;\n* // returns <Float64Array>[ 0.0, 40.0, 80.0, 120.0, 160.0 ]\n*/\nfunction linspace( out, start, stop, len, endpoint ) {\n\tvar buf;\n\tvar set;\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( len === 0 ) {\n\t\treturn out;\n\t}\n\t// Cache array object references:\n\tbuf = out.data;\n\tset = out.accessors[ 1 ];\n\n\t// Set the first value:\n\tif ( len === 1 ) {\n\t\tif ( endpoint ) {\n\t\t\tset( buf, 0, stop );\n\t\t} else {\n\t\t\tset( buf, 0, start );\n\t\t}\n\t\treturn out;\n\t}\n\tset( buf, 0, start );\n\n\t// Calculate the increment:\n\tif ( endpoint ) {\n\t\tN = len - 1;\n\t} else {\n\t\tN = len;\n\t}\n\td = ( stop-start ) / N;\n\n\t// Generate linearly spaced values:\n\tfor ( i = 1; i < N; i++ ) {\n\t\tset( buf, i, start + (d*i) );\n\t}\n\t// Check whether to include the `stop` value in the output array:\n\tif ( endpoint ) {\n\t\tset( buf, N, stop );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar dtype = require( '@stdlib/complex-dtype' );\nvar adtype = require( '@stdlib/array-dtype' );\nvar reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpret128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar acccmplx = require( './accessors_complex.js' );\nvar accreal = require( './accessors_real.js' );\nvar typedcmplx = require( './typed_complex.js' );\nvar typedreal = require( './typed_real.js' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced sequence over a specified interval and assigns the results to a provided output array.\n*\n* @param {(number|ComplexLike)} start - start of interval\n* @param {(number|ComplexLike)} stop - end of interval\n* @param {Collection} out - output array\n* @param {Options} [options] - options\n* @param {boolean} [options.endpoint=true] - boolean indicating whether to include the `stop` value in the output array\n* @throws {TypeError} first argument must be either a real or complex number\n* @throws {TypeError} second argument must be either a real or complex number\n* @throws {TypeError} third argument must be an array-like object\n* @throws {TypeError} last argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} the output array data type must be a complex number data type or \"generic\" when either `start` or `stop` is a complex number\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var out = new Float64Array( 6 );\n* var arr = linspace( 0, 100, out );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*/\nfunction linspace( start, stop, out ) {\n\tvar opts;\n\tvar err;\n\tvar dt1;\n\tvar dt2;\n\tvar flg;\n\tvar odt;\n\tvar o;\n\n\tif ( typeof start === 'object' ) {\n\t\tdt1 = dtype( start );\n\t\tif ( dt1 === null ) {\n\t\t\tif ( !isComplexLike( start ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a real or complex number. Value: `%s`.', start ) );\n\t\t\t}\n\t\t\tdt1 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a real or complex number. Value: `%s`.', start ) );\n\t} else {\n\t\tdt1 = 'float64';\n\t}\n\tif ( typeof stop === 'object' ) {\n\t\tdt2 = dtype( stop );\n\t\tif ( dt2 === null ) {\n\t\t\tif ( !isComplexLike( stop ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a real or complex number. Value: `%s`.', stop ) );\n\t\t\t}\n\t\t\tdt2 = 'complex128';\n\t\t}\n\t\tflg = true;\n\t} else if ( !isNumber( stop ) || isnan( stop ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a real or complex number. Value: `%s`.', stop ) );\n\t} else {\n\t\tdt2 = 'float64';\n\t}\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array-like object. Value: `%s`.', out ) );\n\t}\n\topts = {\n\t\t'endpoint': defaults.endpoint\n\t};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, arguments[ 3 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\todt = adtype( out );\n\tif ( odt === null ) {\n\t\todt = 'generic';\n\t}\n\tif ( odt === 'complex64' ) {\n\t\ttypedcmplx( reinterpret64( out, 0 ), dt1, start, dt2, stop, out.length, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( odt === 'complex128' ) {\n\t\ttypedcmplx( reinterpret128( out, 0 ), dt1, start, dt2, stop, out.length, opts.endpoint ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tif ( flg ) {\n\t\tif ( odt === 'generic' ) {\n\t\t\to = arraylike2object( out );\n\t\t\tacccmplx( o, dt1, start, dt2, stop, out.length, opts.endpoint );\n\t\t\treturn out;\n\t\t}\n\t\tthrow new TypeError( 'invalid arguments. If either of the first two arguments are complex numbers, the output array must be a complex number array or a \"generic\" array-like object.' );\n\t}\n\to = arraylike2object( out );\n\tif ( o.accessorProtocol ) {\n\t\taccreal( o, start, stop, out.length, opts.endpoint );\n\t\treturn out;\n\t}\n\ttypedreal( out, start, stop, out.length, opts.endpoint );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = linspace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a linearly spaced array.\n*\n* @module @stdlib/array-linspace\n*\n* @example\n* var linspace = require( '@stdlib/array-linspace' );\n*\n* var arr = linspace( 0, 100, 6 );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*\n* @example\n* var linspace = require( '@stdlib/array-linspace' );\n*\n* var arr = linspace( 0, 100, 5, {\n*     'endpoint': false\n* });\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var linspace = require( '@stdlib/array-linspace' );\n*\n* var arr = new Float64Array( 6 );\n* var out = linspace.assign( 0, 100, out );\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0, 100.0 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var linspace = require( '@stdlib/array-linspace' );\n*\n* var arr = new Float64Array( 5 );\n* var out = linspace.assign( 0, 100, out, {\n*     'endpoint': false\n* });\n* // returns <Float64Array>[ 0.0, 20.0, 40.0, 60.0, 80.0 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_generic_real", "__commonJSMin", "exports", "module", "linspace", "start", "stop", "len", "endpoint", "arr", "N", "d", "i", "require_generic_complex", "__commonJSMin", "exports", "module", "Complex64", "Complex128", "real", "imag", "realf", "imagf", "linspace", "dt1", "start", "dt2", "stop", "len", "endpoint", "cmplx", "isf32", "arr", "re1", "re2", "im1", "im2", "re", "im", "dr", "di", "N", "i", "require_typed_real", "__commonJSMin", "exports", "module", "linspace", "out", "start", "stop", "len", "endpoint", "N", "d", "i", "require_typed_complex", "__commonJSMin", "exports", "module", "real", "imag", "realf", "imagf", "linspace", "out", "dt1", "start", "dt2", "stop", "len", "endpoint", "re1", "re2", "im1", "im2", "dr", "di", "N", "i", "j", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isString", "isBoolean", "format", "validate", "opts", "options", "require_defaults", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isComplexLike", "isNumber", "isNonNegativeInteger", "isnan", "dtype", "ctors", "reinterpret64", "reinterpret128", "format", "genreal", "gencmplx", "typedreal", "typedcmplx", "validate", "defaults", "linspace", "start", "stop", "len", "opts", "ctor", "err", "out", "dt1", "dt2", "flg", "require_accessors_complex", "__commonJSMin", "exports", "module", "Complex64", "Complex128", "real", "imag", "realf", "imagf", "linspace", "out", "dt1", "start", "dt2", "stop", "len", "endpoint", "cmplx", "isf32", "re1", "re2", "im1", "im2", "set", "buf", "re", "im", "dr", "di", "N", "i", "require_accessors_real", "__commonJSMin", "exports", "module", "linspace", "out", "start", "stop", "len", "endpoint", "buf", "set", "N", "d", "i", "require_assign", "__commonJSMin", "exports", "module", "isComplexLike", "isNumber", "isCollection", "format", "isnan", "dtype", "adtype", "reinterpret64", "reinterpret128", "arraylike2object", "acccmplx", "accreal", "typedcmplx", "typedreal", "validate", "defaults", "linspace", "start", "stop", "out", "opts", "err", "dt1", "dt2", "flg", "odt", "o", "setReadOnly", "main", "assign"]
}
